#include <iostream>
#include <string>
#include <stdlib.h>
using namespace std;
//2.	Написати клас «String».Клас повинен містити :
// 
//•	конструктор по замовчуванню, що дозволяє створити стрічку довжиною 80 символів;
//•	конструктор, що дозволяє створювати стрічку довільного розміру;
//•	конструктор, який створює стрічку і ініціалізує її стрічкою, отриманою від користувача, як параметр.
// 
//Клас також повинен містити методи :
//•	методи - аксесори;
//•	введення стрічки з клавіатури;
//•	виведення стрічки на екран;
//•	визначення розміру стрічки;
//•	вставки нового символа або підстрічки в позицію;
//•	видалення шуканого символа або підстрічки;
//•	знаходження підстрічки в стрічці;
//•	пошук і заміна символа або підстрічки в стрічці.
// 
//В функції main() створити:
//•	один об’єкт класу з використанням конструктора по замовчуванню, 
//заповнити його за допомогою метода для введення стрічки і вивести на екран;
//•	один об’єкт класу з використанням конструктора, 
//що дозволяє створювати стрічку довільного розміру, заповнити його за допомогою метода для введення стрічки 
//і вивести на екран;
//•	один об’єкт класу, який який створює стрічку і ініціалізує її стрічкою, 
//отриманою від користувача, як параметр і вивести на екран.

class String
{
private:
	int size = 80;
	char* str = new char[size];
public:
	String()//•	конструктор по замовчуванню, що дозволяє створити стрічку довжиною 80 символів;
	{
		char* str = new char[size];
	}
	String(int size)//•	конструктор, що дозволяє створювати стрічку довільного розміру;
	{
		char* str = new char[size];
	}
	String(char* str)//•конструктор, який створює стрічку і ініціалізує її стрічкою, отриманою від користувача, як параметр.
	{
		this->str = str;
	}
	void KeyboardImput()//•	введення стрічки з клавіатури;
	{
		cout << "Введите строку с клавиатуры:\t";
		cin >> str;
	}
	void PrintString()//•виведення стрічки на екран;
	{
		cout << "Выводим строку:\t";
		cout << str << endl;
	}
	void SizeString()//•визначення розміру стрічки;
	{
		cout << "Размер строки:\t";
		int length = strlen(str);
		cout << length << endl;
	}
	void EditString()//•вставки нового символа або підстрічки в позицію;
	{

	}
	void DeleteString()//•видалення шуканого символа або підстрічки;
	{
		char Symbol;
		int length = strlen(str);
		char* Str = new char[256];
		int obj = 0;
		cout << "Что вы хотите удалить?" << endl;
		cout << "1.Символ\t" << "2.Подстроку" << endl;
		cin >> obj;
		if (obj == 1)
		{
			cout << "Какой символ удалить?" << endl;
			cin >> Symbol;
			for (int i = 0; i < length; ++i)
			{
				if (str[i] == Symbol)
				{
					for (int j = i; j < length; ++j)
					{
						str[j] = str[j + 1];
					}
					break;
				}
			}
			cout << "Результат:\t" << str << endl;
		}
		if (obj == 2)
		{
			cout << "Какую подстроку удалить?" << endl;
			cin >> Str;
			/*strcpy_s(str, strlen(Str)+1, str);*/
			string NewStr = string(str);
			string DelStr = string(Str);

			string::size_type pos = NewStr.find(DelStr);
			while (pos != string::npos)
			{
				NewStr.erase(pos, DelStr.size());
				pos = NewStr.find(DelStr, pos + 1);
			}
			cout << "Результат:" << NewStr << endl;
		}
		if (obj != 1 && obj != 2)
		{
			cout << "Введено неверное значение." << endl;
		}

		delete[] Str;
	}
	void SearchString()//•знаходження підстрічки в стрічці;
	{

	}
	void SearchAndEddit()//•пошук і заміна символа або підстрічки в стрічці.
	{
		//По сути тот же метод DeleteString.
	}
	~String()
	{
		delete str;
	}
};
int main()
{
	setlocale(LC_ALL, "ru");
	int SIZE = 0;

	String Default; //•	один об’єкт класу з використанням конструктора по замовчуванню, 
	Default.KeyboardImput();//заповнити його за допомогою метода для введення стрічки
	Default.PrintString(); //і вивести на екран.

	cout << "Введите размер строки:\t";
	cin >> SIZE;

	String AnySize(SIZE);//що дозволяє створювати стрічку довільного розміру, 
	AnySize.KeyboardImput();//заповнити його за допомогою метода для введення стрічки 
	AnySize.PrintString();//і вивести на екран;

	char* Text = new char[256];
	cout << "Введите строку:\t";
	cin >> Text;

	String MyStr(Text); //один об’єкт класу,який створює стрічку і ініціалізує її стрічкою,
	MyStr.PrintString();//отриманою від користувача, як параметр і вивести на екран.

	system("pause");
	return 0;
}
